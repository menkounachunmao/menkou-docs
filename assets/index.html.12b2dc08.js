import{r as s,o as a,c as n,a as e,F as l,d as p,b as r}from"./app.907c1d8f.js";const o={},c=p('<h1 id="git"><a class="header-anchor" href="#git">#</a> git</h1><h2 id="基础"><a class="header-anchor" href="#基础">#</a> 基础</h2><h3 id="初始化仓库"><a class="header-anchor" href="#初始化仓库">#</a> 初始化仓库</h3><p>1, 空项目</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> init\n<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者直接克隆远程仓库</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2, 已有本地仓库</p><ul><li>没有远程仓库直接添加即可</li><li>已有远程仓库参考<a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA">链接远程仓库</a></li></ul><h3 id="检查当前文件状态"><a class="header-anchor" href="#检查当前文件状态">#</a> 检查当前文件状态</h3><p>可以用 git status 命令查看哪些文件处于什么状态。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status\n\n<span class="token function">git</span> status -s // 简洁模式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="跟踪新文件"><a class="header-anchor" href="#跟踪新文件">#</a> 跟踪新文件</h3><p>使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> README\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。</p></blockquote><h3 id="提交更新"><a class="header-anchor" href="#提交更新">#</a> 提交更新</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit\n\n<span class="token function">git</span> commit -m <span class="token operator">&lt;</span>提交说明<span class="token operator">&gt;</span>\n\n<span class="token function">git</span> commit -a -m <span class="token operator">&lt;</span>提交说明<span class="token operator">&gt;</span> // 快速提交\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>提交说明格式建议：</p><ul><li>ADD-FEAT：新增功能提交（一般用于第一次功能代码提交）</li><li>ADD-STYLE: 新增加代码风格样式修改</li><li>MOD-STYLE：修改/ 整理代码风格样式，不涉及逻辑更改 （常用）</li><li>MOD-FEAT: 修改功能代码（一般用于第一次之后的功能代码提交）</li><li>BUGFIX: 用于平常测试的bug修复；</li><li>HOTFIX: 用于线上紧急bug修复</li><li>DEL-STYLE：对于代码风格上删除一些无用代码、注释等</li><li>DEL-FEAT: 删除一些无用的功能块代码</li></ul><h3 id="移除文件"><a class="header-anchor" href="#移除文件">#</a> 移除文件</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token function">rm</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> 或者手动删除\n<span class="token number">2</span>. <span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 -f（译注：即 force 的首字母）</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> -f  <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>只清除暂存区不删除文件</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>git rm</code> 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。比如： 删除 <code>log/</code> 目录下扩展名为 <code>.log</code> 的所有文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> log/<span class="token punctuation">\\</span>*.log \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="查看提交记录"><a class="header-anchor" href="#查看提交记录">#</a> 查看提交记录</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>git log 后面可以接各种命令来筛选记录，比较麻烦建议直接使用可视化工具查看</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">&quot;%h %s&quot;</span> --graph\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="撤销操作"><a class="header-anchor" href="#撤销操作">#</a> 撤销操作</h3><h4 id="已提交"><a class="header-anchor" href="#已提交">#</a> 已提交</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit -m <span class="token string">&#39;initial commit&#39;</span>\n<span class="token function">git</span> <span class="token function">add</span> forgotten_file\n<span class="token function">git</span> commit --amend\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当前提交替换前一次提交</p><h4 id="未提交"><a class="header-anchor" href="#未提交">#</a> 未提交</h4><ul><li>将文件从缓存中撤销</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>撤销文件的修改(重置为上一次提交)</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="远程仓库"><a class="header-anchor" href="#远程仓库">#</a> 远程仓库</h3><ul><li>查看远程仓库</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p><ul><li>添加远程仓库</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>shortname<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>从远程仓库中抓取与拉取</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令</p></blockquote><ul><li>推送到远程仓库</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> push origin master 或者 <span class="token function">git</span> push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>查看某个远程仓库</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>远程仓库的重命名与移除</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>old<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同时也会修改你所有远程跟踪的分支名字</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> remote remove <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="标签"><a class="header-anchor" href="#标签">#</a> 标签</h3><h4 id="查看标签"><a class="header-anchor" href="#查看标签">#</a> 查看标签</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag\n<span class="token function">git</span> tag -l <span class="token string">&quot;v1.8.5*&quot;</span> // 按条件查找\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="创建标签"><a class="header-anchor" href="#创建标签">#</a> 创建标签</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag -a v1.4 -m <span class="token string">&quot;my version 1.4&quot;</span> // 创建附注标签\n<span class="token function">git</span> tag  v1.4 // 创建轻量标签\n <span class="token function">git</span> tag -a v1.2 <span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span> // 历史提交打tag\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="推送标签"><a class="header-anchor" href="#推送标签">#</a> 推送标签</h4><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 <code>git push origin &lt;tagname&gt;</code>,推送所有<code>git push origin --tags</code></p><h4 id="删除标签"><a class="header-anchor" href="#删除标签">#</a> 删除标签</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上述命令并不会从任何远程仓库中移除这个标签，你必须用 <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code> 来更新你的远程仓库,或者<code>git push origin --delete &lt;tagname&gt;</code></p><h3 id="git-别名"><a class="header-anchor" href="#git-别名">#</a> Git 别名</h3><blockquote><p>Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> config --global alias.co checkout\n$ <span class="token function">git</span> config --global alias.br branch\n$ <span class="token function">git</span> config --global alias.ci commit\n$ <span class="token function">git</span> config --global alias.st status``<span class="token variable"><span class="token variable">`</span>\n<span class="token comment">### .gitignore</span>\n\n<span class="token variable">`</span></span>``gitignore\nnode_modules // 忽略node_modules下所有文件\n.temp\n.cache\ndist\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>.gitignore</code> 的格式规范如下：</p><ul><li><p>所有空行或者以 # 开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</p></li><li><p>匹配模式可以以（/）开头防止递归。</p></li><li><p>匹配模式可以以（/）结尾指定目录。</p></li><li><p>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</p></li></ul><blockquote><p>glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）； 问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（<strong>）表示匹配任意中间目录，比如 a/</strong>/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。</p></blockquote><div class="language-gitignore ext-gitignore line-numbers-mode"><pre class="language-gitignore"><code><span class="token comment"># 忽略所有的 .a 文件</span>\n<span class="token entry string"><span class="token operator">*</span>.a</span>\n\n<span class="token comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span>\n<span class="token entry string"><span class="token operator">!</span>lib.a</span>\n\n<span class="token comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span>\n<span class="token entry string"><span class="token punctuation">/</span>TODO</span>\n\n<span class="token comment"># 忽略任何目录下名为 build 的文件夹</span>\n<span class="token entry string">build<span class="token punctuation">/</span></span>\n\n<span class="token comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span>\n<span class="token entry string">doc<span class="token punctuation">/</span><span class="token operator">*</span>.txt</span>\n\n<span class="token comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span>\n<span class="token entry string">doc<span class="token punctuation">/</span><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.pdf</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Tip:</p>',76),t=r("GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 "),i={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},u=r("https://github.com/github/gitignore"),d=r(" 找到它。"),b=p('<h2 id="分支"><a class="header-anchor" href="#分支">#</a> 分支</h2><p><img src="https://git-scm.com/book/en/v2/images/advance-master.png" alt="img"></p><blockquote><p>Git 保存的不是文件的变化或者差异，而是一系列不同时刻的 快照 。</p></blockquote><h3 id="创建分支"><a class="header-anchor" href="#创建分支">#</a> 创建分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> branch <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在当前所在的提交对象上创建一个指针,HEAD 指向当前所在的分支</p><h3 id="分支切换"><a class="header-anchor" href="#分支切换">#</a> 分支切换</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n\n <span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span> // 创建并切换到目标分支\n\n <span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span> origin/<span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span> // 将远程git仓库里的指定分支拉取到本地（本地不存在的分支）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支</p><h3 id="合并分支"><a class="header-anchor" href="#合并分支">#</a> 合并分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge  <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-5.png" alt="img"></p><p>没有冲突时只是简单的指针移动</p><p><img src="https://git-scm.com/book/en/v2/images/basic-merging-1.png" alt="img"></p><p>master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的公共祖先（C2），做一个简单的三方合并</p><p><img src="https://git-scm.com/book/en/v2/images/basic-merging-2.png" alt="img"></p><p>有冲突的情况下，解决冲突，然后提交更改</p><h3 id="删除分支"><a class="header-anchor" href="#删除分支">#</a> 删除分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> branch -d  <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n <span class="token function">git</span> branch -D  <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span> // 强制删除\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="查看所有分支"><a class="header-anchor" href="#查看所有分支">#</a> 查看所有分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>git branch --no-merged | merged</code> 查看已合并或者未合并的分支, 后面可接分支名来筛选。</p><h3 id="修剪远程分支"><a class="header-anchor" href="#修剪远程分支">#</a> 修剪远程分支</h3><p>当某些分支远程已经删除本地还是存在时</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote prune origin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="推送分支"><a class="header-anchor" href="#推送分支">#</a> 推送分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n\n<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>other_ranch<span class="token operator">&gt;</span> // 推送本地分支到一个命名不相同的远程分支\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="跟踪远程分支"><a class="header-anchor" href="#跟踪远程分支">#</a> 跟踪远程分支</h3><ul><li>修改正在跟踪的上游分支</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -u origin/serverfix\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="删除远程分支"><a class="header-anchor" href="#删除远程分支">#</a> 删除远程分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin --delete <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="变基"><a class="header-anchor" href="#变基">#</a> 变基</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rebase master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）</p><p><img src="https://git-scm.com/book/en/v2/images/basic-rebase-3.png" alt="img"></p><h4 id="变基风险"><a class="header-anchor" href="#变基风险">#</a> 变基风险</h4><p><strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p><blockquote><p>变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。</p></blockquote><h2 id="补救"><a class="header-anchor" href="#补救">#</a> 补救</h2><p>撤消对文件的修改</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>git checkout .</code> 放弃所有更改</p><p>回滚</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log 查看提交记录\n<span class="token function">git</span> reset --hard 版本号\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="工作流"><a class="header-anchor" href="#工作流">#</a> 工作流</h2><h3 id="_1-集中式工作流"><a class="header-anchor" href="#_1-集中式工作流">#</a> 1. 集中式工作流</h3><p>只有一个主分支，成员在同一个分枝上更新，推送及解决冲突</p><h3 id="_2-功能分支工作流"><a class="header-anchor" href="#_2-功能分支工作流">#</a> 2. 功能分支工作流</h3><p>Pull Requests是关键</p><p>每个功能在单独的分枝上开发，开发完成提合并请求，然后再合并到主分支。</p><h3 id="_3-gitflow工作流"><a class="header-anchor" href="#_3-gitflow工作流">#</a> 3. Gitflow工作流</h3><blockquote><p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p></blockquote><p>分支构成：</p><ul><li>master:主分支（用来发布）</li><li>develop:功能集成分支 （用来合并功能分支）</li><li>功能分支</li></ul><h4 id="发布分支"><a class="header-anchor" href="#发布分支">#</a> 发布分支</h4><p>develop分支切一个分支出来作为发布的分支,然后在合并到master分枝上，并打上标记。（只要创建这个分支并push到中央仓库，这个发布就是功能冻结的。任何不在develop分支中的新功能都推到下个发布循环中。）</p><h4 id="维护分支"><a class="header-anchor" href="#维护分支">#</a> 维护分支</h4><p>直接从master切一个修复分支，修复后合并到master及develop。</p>',59),g={href:"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md",target:"_blank",rel:"noopener noreferrer"},h=r("参考链接"),m=p('<h2 id="常见问题"><a class="header-anchor" href="#常见问题">#</a> 常见问题</h2><h3 id="matches-more-than-one"><a class="header-anchor" href="#matches-more-than-one">#</a> matches more than one</h3><blockquote><p>Dst refspec hr-portal-app_v2.0 matches more than one.failed to push some refs</p></blockquote><p>原因: 标签名和分支名相同导致</p><p>解决：删除其中一个即可</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin :refs/tags/dev_test\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="refusing-to-merge"><a class="header-anchor" href="#refusing-to-merge">#</a> refusing to merge</h3><blockquote><p>refusing to merge unrelated histories</p></blockquote><p>本地和仓库是独立的两个库</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull origin master --allow-unrelated-histories\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="相关资源"><a class="header-anchor" href="#相关资源">#</a> 相关资源</h2>',11),k={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},v=r("Pro Git");o.render=function(p,r){const o=s("OutboundLink");return a(),n(l,null,[c,e("p",null,[t,e("a",i,[u,e(o)]),d]),b,e("p",null,[e("a",g,[h,e(o)])]),m,e("p",null,[e("a",k,[v,e(o)])])],64)};export default o;
